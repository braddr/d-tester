\include{/include/test-results}
\set{page_type}{pulls}

\validateURLParameter{projectid}

\pageHeader{60}{\get{projectid}}{
    <link rel="stylesheet" href="/css/pulls.css" type="text/css">
}

# \1 == text
# \2 == platform
# \3 == title
\set{buildHeader}{\quote{
    <th title="\3">\1</th>
}}

\set{firstrow}{1}
\sqlexec{
  select gu.username, gu.id, gp.id, r.owner, r.name, gp.pull_id
    from github_pulls gp, github_users gu, repositories r, projects p, project_repositories pr
   where gp.user_id = gu.id and
         gu.pull_approver is null and
         gp.open = 1 and
         gp.repo_id = r.id and
         r.id = pr.repository_id and
         pr.project_id = p.id and
         p.id = \get{projectid}
   order by gu.username, gu.id
}
\while{\sqlrow{gu_username}{gu_id}{gp_id}{r_owner}{r_name}{gp_pullid}}{
  \if{\firstrow}{
    <table class="whiterounded" id="authtable">

    <tr><th colspan=4>Not yet authorized users</th></tr>
    <tr>
    <th>Username</th>
    <th>GitHub page</th>
    <th>Approve testing for this user</th>
    </tr>
    \set{firstrow}{}
  }
 
  <tr>
    <td>\get{gu_username}</td>
    <td><a href="https://github.com/\get{r_owner}/\get{r_name}/pull/\get{gp_pullid}">\get{r_owner}/\get{r_name}/\get{gp_pullid}</a></td>
    <td>
        \if{\and{\not{\eq{\get{pulls_are_tested}}{1}}}{\get{loggedin}}}{
            <a href="addv2/approve_pull_requester?projectid=\get{projectid}&amp;userid=\get{gu_id}&amp;csrf=\get{csrf}">Approve</a>
        }{
            Must be logged in
        }
    </td>
  </tr> 
}
\if{\not{\firstrow}}{
  </table>
}

\sqlexec{
  select ptr.id,
         r.name,
         ghp.pull_id,
         ptr.platform,
         ptr.start_time,
         ptr.rc,
         ptr.deleted
    from repositories   r,
         project_repositories pr,
         github_pulls   ghp,
         github_users   u,
         pull_test_runs ptr,
         (select g_p_id, platform, max(start_time) as st from pull_test_runs, github_pulls ghp where ghp.id = g_p_id and ghp.open = 1 group by g_p_id, platform) maxes
   where maxes.g_p_id = ptr.g_p_id and
         maxes.platform = ptr.platform and
         maxes.st = ptr.start_time and
         ptr.g_p_id = ghp.id and
         ghp.repo_id = r.id and
         ghp.user_id = u.id and
         ghp.open = 1 and
         u.pull_approver is not null and
         r.id = pr.repository_id and
         pr.project_id = \get{projectid} and
         ptr.start_time > date_sub(now(), interval 2 week)
   order by r.name, ghp.pull_id, ptr.platform
}
\while{\sqlrow{ptr_id}{r_name}{pull_id}{ptr_platform}{ptr_start_time}{ptr_rc}{ptr_deleted}}{
  \set{\get{r_name}_\get{pull_id}_\get{ptr_platform}_id}{\get{ptr_id}}
  \set{\get{r_name}_\get{pull_id}_\get{ptr_platform}_rc}{\get{ptr_rc}}
  \set{\get{r_name}_\get{pull_id}_\get{ptr_platform}_deleted}{\eq{\get{ptr_deleted}}{1}}
}

# \1 == repo name
# \2 == pull id
# \3 == platform
\set{drawcol}{\quote{
  \if{\get{\1_\2_\3_rc}}{
    \processRC{\get{\1_\2_\3_rc}}
    <td class="pullcell \get{class}\if{\get{\1_\2_\3_deleted}}{\ old}" title="\get{class}" ><a href="show-run.ghtml?projectid=\get{projectid}&amp;runid=\get{\1_\2_\3_id}&amp;isPull=true">\get{text}</a></td>
  }{
    \if{\get{\1_\2_\3_id}}{
      <td class="pullcell running" title="running"><a href="show-run.ghtml?projectid=\get{projectid}&amp;runid=\get{\1_\2_\3_id}&isPull=true">R</a></td>
    }{
      <td class="pullcell unknown" title="unknown">&nbsp;</td>
    }
  }
}}

# \1 == string to shorten
\set{shorten}{\quote{
\if{\op{\strlength{\1}}{>}{20}}{
        \substr{\1}{0}{10}...\substr{\1}{\op{\strlength{\1}}{-}{10}}{10}
    }{
        \1
    }
}}

# \1 == repo name (dmd, druntime, phobos)
# \2 == repo id
# \3 == pull id
# \4 == userid
# \5 == ref
# \6 == updated_at
# \7 == head_date
# \8 == repo owner (D-Programming-Language)
# \9 == auto-merge
# \10 == has_priority
# \11 == github_pull.id
\set{drawrow}{\quote{
    <td class="pullcell header"><a href="https://github.com/\8/\1/pull/\3">\1/\3</a></td>
    <td class="pullcell header"><a href="pull-history.ghtml?projectid=\get{projectid}&amp;repoid=\2&amp;pullid=\3" title="\4/\5">\4/\shorten{\5}</a></td>
    <td>\if{\get{loggedin}}{<a href="addv2/toggle_auto_merge?projectid=\get{projectid}&amp;repoid=\2&amp;pullid=\3&amp;ghp_id=\11&amp;from=pulls&amp;csrf=\get{csrf}">\if{\9}{Yes}{No}</a>}{\if{\9}{Yes}{No}}</td>
    <td>\if{\eq{\10}{0}}{No}{Yes}</td>
    <td class="pullcell lastcommitted">\7</td>
    \drawcol{\1}{\3}{FreeBSD_32}
    \drawcol{\1}{\3}{FreeBSD_64_64}
    \drawcol{\1}{\3}{Linux_32}
    \drawcol{\1}{\3}{Linux_64_64}
    \drawcol{\1}{\3}{Linux_32_64}
    \drawcol{\1}{\3}{Linux_64_32}
    #\drawcol{\1}{\3}{Darwin_32}
    \drawcol{\1}{\3}{Darwin_64_64}
    #\drawcol{\1}{\3}{Darwin_32_64}
    \drawcol{\1}{\3}{Darwin_64_32}
    \drawcol{\1}{\3}{Win_32}
    \drawcol{\1}{\3}{Win_32_64}
}}

# \1 == repo name (dmd, druntime, phobos)
# \2 == pull id
# \3 == platform
\set{getastate}{\quote{
  \if{
    \get{\1_\2_\3_id}
  }{
    \if{
      \not{\get{\1_\2_\3_deleted}}
    }{
      \processRC{\get{\1_\2_\3_rc}}
      {\get{class}}
    }
  }
}}

# \1 == repo name (dmd, druntime, phobos)
# \2 == pull id
\set{getstate}{\quote{
  \set{result}{old}
  \set{ss1}{\getastate{\1}{\2}{FreeBSD_32}}
  \set{ss2}{\getastate{\1}{\2}{FreeBSD_64_64}}
  \set{ss3}{\getastate{\1}{\2}{Win_32}}
  \set{ss4}{\getastate{\1}{\2}{Win_32_64}}
  \set{ss5}{\getastate{\1}{\2}{Linux_32}}
  \set{ss6}{\getastate{\1}{\2}{Linux_64_64}}
  \set{ss7}{\getastate{\1}{\2}{Linux_32_64}}
  \set{ss8}{\getastate{\1}{\2}{Linux_64_32}}
  \set{ss9}{\getastate{\1}{\2}{Darwin_64_64}}
  \set{ss10}{\getastate{\1}{\2}{Darwin_64_32}}
  \set{ss11}{\getastate{\1}{\2}{Darwin_32}}
  #\set{ss12}{\getastate{\1}{\2}{Darwin_32_64}}
  \set{i}{1}
  \set{numpasses}{0}
  \while{\op{11}{>}{\get{i}}}{
    \if{
      \eq{\get{ss\i}}{fail}
    }{
      \set{i}{10}
      \set{result}{hasfailures}
    }{\if{
      \eq{\get{ss\i}}{pass}
    }{
      \set{result}{haspasses}
      \inc{numpasses}
    }{\if{
      \eq{\get{ss\i}}{running}
    }{
      \set{result}{haspasses}
    }}}
    \inc{i}
  }
  \if{\eq{\get{numpasses}}{10}}{passed}{\result}
}}

\set{num_repos}{0}
\sqlexec{
  select r.name
    from projects p, repositories r, project_repositories pr
   where p.id = \get{projectid} and
         p.id = pr.project_id and
         pr.repository_id = r.id
}
\while{\sqlrow{r_\get{num_repos}_name}}{
  \set{num_\get{r_\get{num_repos}_name}_old}{0}
  \set{num_\get{r_\get{num_repos}_name}_hasfailures}{0}
  \set{num_\get{r_\get{num_repos}_name}_haspasses}{0}
  \set{num_\get{r_\get{num_repos}_name}_passed}{0}
  \set{num_\get{r_\get{num_repos}_name}_autopull_old}{0}
  \set{num_\get{r_\get{num_repos}_name}_autopull_hasfailures}{0}
  \set{num_\get{r_\get{num_repos}_name}_autopull_haspasses}{0}
  \set{num_\get{r_\get{num_repos}_name}_autopull_passed}{0}
  \inc{num_repos}
}

\sqlexec{
    select r.owner, r.name, r.id, ghp.pull_id, u.username, ghp.head_ref, ghp.updated_at, date(ghp.head_date), ghp.auto_pull, ghp.has_priority, ghp.id
      from projects p, repositories r, github_pulls ghp, github_users u, project_repositories pr
     where ghp.repo_id = r.id and ghp.open = 1 and ghp.user_id = u.id and u.pull_approver is not null and r.id = pr.repository_id and pr.project_id = p.id and p.id = \get{projectid}
     order by r.name, ghp.pull_id desc
}
\while{\sqlrow{r_owner}{r_name}{p_id}{ghp_pull_id}{u_username}{ghp_head_ref}{ghp_updated_at}{ghp_head_date}{ghp_autopull}{ghp_haspriority}{ghp_id}}{
    # get the bucket to place the row in
    \set{name}{\get{r_name}_\if{\get{ghp_autopull}\eq{\get{ghp_haspriority}}{1}}{autopull_}\getstate{\get{r_name}}{\get{ghp_pull_id}}}

    # get one row of html and store it in name_num
    \set{\get{name}_\get{num_\get{name}}}{\drawrow{\get{r_name}}{\get{p_id}}{\get{ghp_pull_id}}{\get{u_username}}{\get{ghp_head_ref}}{\get{ghp_updated_at}}{\get{ghp_head_date}}{\get{r_owner}}{\get{ghp_autopull}}{\get{ghp_haspriority}}{\get{ghp_id}}}

    \inc{num_\get{name}}
}

# \1 == passed | haspasses | hasfailures | old
\set{sum_repos}{\quote{
  \set{tot}{0}
  \set{i}{0}
  \while{\op{\get{num_repos}}{>}{\get{i}}}{
    \inc{tot}{\get{num_\get{r_\get{i}_name}_\1}}
    \inc{i}
  }
  \get{tot}
}}

\set{total_passed}{\sum_repos{passed}}
\set{total_haspasses}{\sum_repos{haspasses}}
\set{total_hasfailures}{\sum_repos{hasfailures}}
\set{total_old}{\sum_repos{old}}
\set{total_autopull_passed}{\sum_repos{autopull_passed}}
\set{total_autopull_haspasses}{\sum_repos{autopull_haspasses}}
\set{total_autopull_hasfailures}{\sum_repos{autopull_hasfailures}}
\set{total_autopull_old}{\sum_repos{autopull_old}}

<table class="whiterounded" id="pulltable">
<tr class="pullheaders">
<th></th>
<th>GitHub page</th>
<th>Test History</th>
<th>Merge</th>
<th>Priority</th>
<th>Last Committed</th>
\buildHeader{F 32}{FreeBSD_32}{FreeBSD with a 32 bit compiler binary and 32 bit output}
\buildHeader{F 64}{FreeBSD_64_64}{FreeBSD with a 64 bit compiler binary and 64 bit output}
\buildHeader{L 32}{Linux_32}{Linux with a 32 bit compiler binary and 32 bit output}
\buildHeader{L 64}{Linux_64_64}{Linux with a 64 bit compiler binary and 64 bit output}
\buildHeader{L 3/6}{Linux_32_64}{Linux with a 32 bit compiler binary and 64 bit output}
\buildHeader{L 6/3}{Linux_64_32}{Linux with a 64 bit compiler binary and 32 bit output}
\buildHeader{O 64}{Darwin_64_64}{OS/X with a 64 bit compiler binary and 64 bit output}
\buildHeader{O 6/3}{Darwin_64_32}{OSX with a 64 bit compiler binary and 32 bit output}
#\buildHeader{O 32}{Darwin_32}{OS/X with a 32 bit compiler binary and 32 bit output}
#\buildHeader{O 3/6}{Darwin_32_64}{OSX with a 32 bit compiler binary and 64 bit output}
\buildHeader{W 32}{Win_32}{Windows with a 32 bit compiler binary and 32 bit output}
\buildHeader{W 64}{Win_32_64}{Windows with a 32 bit compiler binary and 64 bit output}
</tr>

# \1 == repo
# \2 == state
# \3 == label
\set{drawOneSectionRepoBlock}{\quote{
    \set{i}{0}
    \while{ \op{\get{num_\1_\2}}{>}{\get{i}} }{
        \if{\firstsecrow}{
            \set{firstsecrow}{}
            <tr class="secspacer2"><td colspan="16"></td></tr>
            <tr class="pullrow seclabel">
                <td class="seclabel" rowspan="\if{\op{\get{total_\2}}{<}{5}}{\op{\get{total_\2}}{+}{1}}{\get{total_\2}}"><div class="rotate">\3</div></td>
                \get{\1_\2_\get{i}}
            </tr>
        }{
            <tr class="pullrow">
                \get{\1_\2_\get{i}}
            </tr>
        }

        \inc{i}
    }
    \set{totalrows}{\op{\get{totalrows}}{+}{\get{i}}}
}}

# \1 == section (passed, haspasses, hasfailures, old)
# \2 == label (Passed, Has Passes, Has Failures, Old)
\set{drawOneSection}{\quote{
  \if{\op{\get{total_\1}}{>}{0}}{
    \set{totalrows}{0}
    \set{firstsecrow}{1}
    \set{ridx}{0}
    \while{\op{\get{num_repos}}{>}{\get{ridx}}}{
      \drawOneSectionRepoBlock{\get{r_\get{ridx}_name}}{\1}{\2}
      \inc{ridx}
    }
    \if{\get{firstsecrow}}{
      <tr class="pullrow seclabel">
          <td class="seclabel"><div class="rotate">\2</div></td>
          <td colspan="15"></td>
      </tr>
    }{
      \if{\op{5}{>}{\get{totalrows}}}{
        <tr class="filler"><td class="filler" colspan="15" style="height: \op{96}{-}{\op{22}{*}{\get{total_\1}}}px"></td></tr>
      }
    }
    \if{\op{\get{ridx}}{>}{0}}{
        <tr class="secspacer"><td colspan="16"></td></tr>
    }
  }
}}

\if{
  \op{\get{total_autopull_passed}}{>}{0}
  \op{\get{total_autopull_haspasses}}{>}{0}
  \op{\get{total_autopull_hasfailures}}{>}{0}
  \op{\get{total_autopull_old}}{>}{0}
}{
  <tr id="pullsheader"><th></th><th colspan="16">Prioritized Pull Requests</th></tr>
  \drawOneSection{autopull_passed}{&nbsp;&nbsp;Passed}
  \drawOneSection{autopull_haspasses}{&nbsp;&nbsp;Has&nbsp;Passes}
  \drawOneSection{autopull_hasfailures}{&nbsp;&nbsp;Has&nbsp;Failures}
  \drawOneSection{autopull_old}{&nbsp;&nbsp;Old&nbsp;Results}
}

<tr id="pullsheader"><th></th><th colspan="16">Standard Priority Pull Requests</th></tr>
\if{
  \op{\get{total_passed}}{>}{0}
  \op{\get{total_haspasses}}{>}{0}
  \op{\get{total_hasfailures}}{>}{0}
  \op{\get{total_old}}{>}{0}
}{
  \drawOneSection{passed}{&nbsp;&nbsp;Passed}
  \drawOneSection{haspasses}{&nbsp;&nbsp;Has&nbsp;Passes}
  \drawOneSection{hasfailures}{&nbsp;&nbsp;Has&nbsp;Failures}
  \drawOneSection{old}{&nbsp;&nbsp;Old&nbsp;Results}
}{
  <tr><td class="nopulls" colspan="16">No pulls</td></tr>
}

# allow enough room for the rounded corners to render
<tr><td colspan="16"></td></tr>
</table>

\pageFooter

